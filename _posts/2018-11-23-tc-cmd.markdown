---
1layout: post
title:  "Linux Traffic Control - cmd"
date:   2018-12-13 00:51:40 -0700
categories: networking
---



# Linux Traffic Control - cmd

TC 命令 - user-space utility program 用來設定 [Linux kernel packet scheduler](https://en.wikipedia.org/wiki/Linux_kernel_packet_scheduler)

tc 可以使用以下命令對 QDisc、類和過濾器進行操作:

- add

  在一個節點里加入一個 QDisc、類或者過濾器。添加時，需要傳遞一個 parent 作爲參數，傳遞參數時既可以使用 ID 也可以直接傳遞設備的 root。如果要建立一個 QDisc 或者過濾器，可以使用句柄 (handle) 來命名；如果要建立一個類，可以使用類識別符 (classid) 來命名。
  Add a qdisc, class or filter to a node. For all entities, a parent must be passed, either by passing its ID or by attaching directly to the root of a device. When creating a qdisc or a filter, it can be named with the handle parameter. A class is named with the classid parameter.

- remove

  刪除有某個句柄 (handle) 指定的 QDisc，根 QDisc (root)也可以刪除。被刪除 QDisc 上的所有子類以及附屬於各個類的過濾器都會被自動刪除。
  A qdisc can be removed by specifying its handle, which may also be ’root’. All subclasses and their leaf qdiscs are automatically deleted, as well as any filters attached to them.

- change

  以替代的方式修改某些條目。除了句柄 (handle) 和 parent 不能修改以外，change命令的語法和add命令相同。換句話說，change 命令不能移動節點的位置。
  Some entities can be modified ’in place’. Shares the syntax of ’add’, with the exception that the handle cannot be changed and neither can the parent. In other words, change cannot move a node.

- replace

  對一個現有節點進行近於原子操作的刪除／添加。如果節點不存在，這個命令就會建立節點。
  Performs a nearly atomic remove/add on an existing node id. If the node doe.

- link

  只適用於 DQisc，替代一個現有的節點。
  Only available for qdiscs and performs a replace where the node must exist already.

命令個式:

```
tc qdisc [ add | del | replace | change | show ] dev STRING
       [ handle QHANDLE ] [ root | ingress | parent CLASSID ]
       [ estimator INTERVAL TIME_CONSTANT ]
       [ stab [ help | STAB_OPTIONS] ]
       [ [ QDISC_KIND ] [ help | OPTIONS ] ]

tc class [ add | del | change | replace | show ] dev STRING
       [ classid CLASSID ] [ root | parent CLASSID ]
       [ [ QDISC_KIND ] [ help | OPTIONS ] ]

tc filter [ add | del | change | replace | show ] dev STRING
       [ pref PRIO ] protocol PROTO
       [ estimator INTERVAL TIME_CONSTANT ]
       [ root | classid CLASSID ] [ handle FILTERID ]
       [ [ FILTER_TYPE ] [ help | OPTIONS ] ]


=== option ===
-s, -stats, -statistics: output more statistics about packet usage.
-d, -details: output more detailed information about rates and cell sizes.
-r, -raw: output raw hex values for handles.
-p, -pretty: decode filter offset and mask values to equivalent filter commands based on TCP/IP.
-iec: print rates in IEC units (ie. 1K = 1024).

```

監控顯示:

```
tc [-s | -d ] qdisc show [ dev STRING ] [ingress]
tc [-s | -d ] class show [ dev STRING ] [ root | parent CLASSID ]
tc filter show [ dev STRING ] [ root | parent CLASSID ]
```





**EXAMPLE:**

以限制流量而言做範例，針對DEV tap823dcd7d-bc後的vm做http 80 port的流量限制為1Mbit，其餘留量可保持在4Mbit，用以下命令

```
tc qdisc add dev tap823dcd7d-bc root handle 1: htb default 10
# 設定1:10流量4Mbit, 以下再分1:100, 1:200 
tc class add dev tap823dcd7d-bc parent 1: classid 1:10 htb rate 4Mbit ceil 4Mbit

# 讓sport 80導入到1:100, 流量1Mbit, 
tc class add dev tap823dcd7d-bc parent 1:10 classid 1:100 htb rate 1Mbit ceil 1Mbit prio 1
tc qdisc add dev tap823dcd7d-bc parent 1:100 handle 101: pfifo
tc filter add dev tap823dcd7d-bc parent 1: protocol ip prio 1 u32 match ip sport 80 0xffff flowid 1:100

# 其他導入到1:200, 流量3Mbit, 
tc class add dev tap823dcd7d-bc parent 1:10 classid 1:200 htb rate 3Mbit ceil 4Mbit prio 1
tc qdisc add dev tap823dcd7d-bc parent 1:200 handle 102: pfifo
tc filter add dev tap823dcd7d-bc parent 1: protocol ip prio 1 u32 match u8 0 0 flowid 1:200
```

刪除命令依序如下

```
tc filter del dev tap823dcd7d-bc parent 1: protocol ip prio 1 u32 match ip sport 80 0xffff flowid 1:100
tc qdisc del dev tap823dcd7d-bc parent 1:200 handle 102:
tc class del dev tap823dcd7d-bc parent 1:10 classid 1:200

tc filter del dev tap823dcd7d-bc parent 1: protocol ip prio 1 u32 match u8 0 0 flowid 1:200
tc qdisc del dev tap823dcd7d-bc parent 1:100 handle 101:
tc class del dev tap823dcd7d-bc parent 1:10 classid 1:100

tc class del dev tap823dcd7d-bc parent 1:0 classid 1:10

tc qdisc del dev tap823dcd7d-bc root handle 1:

```



對於 filter更詳細的處理，可以看help文件

http://man7.org/linux/man-pages/man8/tc-u32.8.html

我們從中找一些簡單的例子來看

```
tc filter ... [ handle HANDLE ] u32 OPTION_LIST [ offset OFFSET ] [
               hashkey HASHKEY ] [ classid CLASSID ] [ divisor uint_value ]
               [ order u32_value ] [ ht HANDLE ] [ sample SELECTOR [ divisor
               uint_value ] ] [ link HANDLE ] [ indev ifname ] [ skip_hw |
               skip_sw ] [ help ]

       OPTION_LIST := [ OPTION_LIST ] OPTION

       OPTION := { match SELECTOR | action ACTION }

       SELECTOR := { u32 VAL_MASK_32 | u16 VAL_MASK_16 | u8 VAL_MASK_8 | ip
               IP | ip6 IP6 | { tcp | udp } TCPUDP | icmp ICMP | mark
               VAL_MASK_32 | ether ETHER }

       IP := { { src | dst } { default | any | all | ip_address [ / {
               prefixlen | netmask } ] } AT | { dsfield | ihl | protocol |
               precedence | icmp_type | icmp_code } VAL_MASK_8 | { sport |
               dport } VAL_MASK_16 | nofrag | firstfrag | df | mf }
```

指令不僅只可針對 IP, TCP, UDP, ICMP或ETH做分類，也能更進一部對這些header內的filed做分類。

下面這個例子就是對ds filed([Differentiated services](https://en.wikipedia.org/wiki/Differentiated_services))的處理範例

```
tc filter add dev tap823dcd7d-bc parent 1: protocol ip prio 1 u32 match ip dsfield 0xe 0xff flowid 1:100

```



**TC 命令到Kernel**

![tc_cmd_to kernel](/images/tc/tc_cmd_to kernel.png)

TC 命令透過[libnetlink](http://man7.org/linux/man-pages/man3/libnetlink.3.html)的**rtnl_talk**函數與kernel溝通。

```
 int rtnl_talk(struct rtnl_handle *rtnl, struct nlmsghdr *n, pid_t peer,
		     unsigned groups, struct nlmsghdr *answer,
		     rtnl_filter_t junk,
		     void *jarg);
```

在**rtnl_talk**()函數中，會調用**SENDMSG**函數，將信息傳遞到Kernel，rtnl_talk同時也會監聽內核返回的消息，並做相應的處理

```
if (rtnl_talk(&rth, &req.n, 0, 0, NULL, NULL, NULL) < 0)
		return 2;
```

在內核中，最終會調用**tc_modify_qidsc**()函數來創建隊列規定

在[pktsched_init()](https://elixir.bootlin.com/linux/v3.3/source/net/sched/sch_api.c#L1783)函數中（linux kernel）用rtnl_register設定信息:

```
rtnl_register(PF_UNSPEC, RTM_NEWQDISC, tc_modify_qdisc, NULL);
    req.n.nlmsg_type = cmd; //對應[cmd1]，類型= RTM_NEWQDISC
    req.t.tcm_family = AF_UNSPEC;
```

來為每個信息對應function:

```
RTM_NEWQDISC -> tc_modify_qdisc
RTM_DELQDISC -> tc_get_qdisc
RTM_GETQDISC-> tc_get_qdisc
RTM_NEWTCLASS -> tc_ctl_tclass
RTM_DELTCLASS -> tc_ctl_tclass
RTM_GETTCLASS -> tc_ctl_tclass
```

filter的對應則在[tc_filter_init()](https://elixir.bootlin.com/linux/v3.3/source/net/sched/cls_api.c#L611)

```
RTM_NEWTFILTER -> tc_ctl_tfilter
RTM_DELTFILTER ->   tc_ctl_tfilter
RTM_GETTFILTER ->  tc_ctl_tfilter
```



